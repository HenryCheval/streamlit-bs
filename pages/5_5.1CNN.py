import streamlit as st

st.title("卷积神经网络（CNN）介绍")
st.write("本章是对卷积神经网络概念的介绍，如果您觉得难以理解，后续的可视化章节可以帮助您掌握。")
st.write("""
卷积神经网络（Convolutional Neural Networks, CNN）这个概念的提出可以追溯到二十世纪80~90年代，
但是有那么一段时间这个概念被“雪藏”了，因为当时的硬件和软件技术比较落后，
而随着各种深度学习理论相继被提出以及数值计算设备的高速发展，卷积神经网络得到了快速发展。那究竟什么是卷积神经网络呢？以手写数字识别为例，整个识别的过程如下所示：

""")
st.image('data/cnn.jpg', caption='CNN的结构', use_column_width=True)

st.markdown("""
以上过程就是识别手写数字的全部过程，可以看到整个过程需要在如下几层进行运算：

- 输入层：输入图像等信息\n
- 卷积层：用来提取图像的底层特征\n
- 池化层：防止过拟合，将数据维度减小\n
- 全连接层：汇总卷积层和池化层得到的图像的底层特征和信息\n
- 输出层：根据全连接层的信息得到概率最大的结果\n
可以看到其中最重要的一层就是卷积层，这也是卷积神经网络名称的由来，下面将会详细讲解这几层的相关内容。\n


""")
#st.image('data/', caption='', use_column_width=True)

st.header("输入层")
st.write("""
输入层比较简单，这一层的主要工作就是输入图像等信息，因为卷积神经网络主要处理的是图像相关的内容，但是我们人眼看到的图像和计算机处理的图像很明显是不一样的，对于输入图像，首先要将其转换为对应的二维矩阵，这个二位矩阵就是由图像每一个像素的像素值大小组成的，我们可以看一个例子，如下图所示的手写数字“8”的图像，计算机读取后是以像素值大小组成的二维矩阵存储的图像。



""")

st.image('data/cnn-2.gif', caption='数字8的灰度图像与其对应的二维矩阵', use_column_width=True)
st.header("卷积层")
st.write("""
 那图片输入进来之后该怎么处理呢？假设我们已经得到图片的二维矩阵了，想要提取其中特征，那么卷积操作就会为存在特征的区域确定一个高值，否则确定一个低值。这个过程需要通过计算其与卷积核（Convolution Kernel）的乘积值来确定。假设我们现在的输入图片是一个人的脑袋，而人的眼睛是我们需要提取的特征，那么我们就将人的眼睛作为卷积核，通过在人的脑袋的图片上移动来确定哪里是眼睛，这个过程如下所示：


""")
st.image('data/cnn-3.gif', caption='提取人的眼睛的特征的过程', use_column_width=True)

st.write("""

卷积核也是一个二维矩阵，当然这个二维矩阵要比输入图像的二维矩阵要小或相等，卷积核通过在输入图像的二维矩阵上不停的移动，每一次移动都进行一次乘积的求和，作为此位置的值，这个过程如下图所示：

""")
st.image('data/cnn-4.gif', caption='卷积的过程', use_column_width=True)

st.write("""
可以看到，整个过程就是一个降维的过程，通过卷积核的不停移动计算，可以提取图像中最有用的特征。我们通常将卷积核计算得到的新的二维矩阵称为特征图，比如上方动图中，下方移动的深蓝色正方形就是卷积核，上方不动的青色正方形就是特征图。

\n\n\n
""")

st.write("""
那如果情况再复杂一些呢？如果我们使用两个卷积核去提取一张彩色图片呢？彩色图片都是三个通道，也就是说一个彩色图片会有三个二维矩阵。第一个通道示例，此时我们使用两组卷积核，每组卷积核都用来提取自己通道的二维矩阵的特征，我们只考虑第一通道的，所以说我们只需要用两组卷积核的第一个卷积核来计算得到特征图就可以了，那么这个过程可见下图
""")

st.image('data/cnn-5.gif', caption='两个卷积核进行卷积的过程', use_column_width=True)
st.header("池化层")
st.write("""
刚才我们也提到了，有几个卷积核就有多少个特征图，现实中情况肯定更为复杂，也就会有更多的卷积核，那么就会有更多的特征图，当特征图非常多的时候，意味着我们得到的特征也非常多，但是这么多特征都是我们所需要的么？显然不是，其实有很多特征我们是不需要的，而这些多余的特征通常会给我们带来如下两个问题：
- 过拟合
- 维度过高
  为了解决这个问题，我们可以利用池化层，那什么是池化层呢？池化层又称为下采样，也就是说，当我们进行卷积操作后，再将得到的特征图进行特征提取，将其中最具有代表性的特征提取出来，可以起到减小过拟合和降低维度的作用，这个过程如下所示：

""")

st.image('data/cnn-6.jpg', caption='池化的过程', use_column_width=True)

st.header("全连接层")

st.write("""
假设还是上面人的脑袋的示例，现在我们已经通过卷积和池化提取到了这个人的眼睛、鼻子和嘴的特征，如果我想利用这些特征来识别这个图片是否是人的脑袋该怎么办呢？此时我们只需要将提取到的所有特征图进行“展平”，将其维度变为1*x，这个过程就是全连接的过程，也就是说，此步我们将所有的特征都展开并进行运算，最后会得到一个概率值，这个概率值就是输入图片是否是人的概率，这个过程如下所示：


""")

st.image('data/cnn-7.png', caption='全连接的过程', use_column_width=True)

st.write("""
 单看这个过程可能还是不太清晰，所以我们可以把之前的过程与全连接层结合起来，如下图所示：


""")
st.image('data/cnn-8.png', caption='整个过程', use_column_width=True)

st.write("""
可以看到，经过两次卷积和最大池化之后，得到最后的特征图，此时的特征都是经过计算后得到的，所以代表性比较强，最后经过全连接层，展开为一维的向量，再经过一次计算后，得到最终的识别概率，这就是卷积神经网络的整个过程。


""")

st.header("输出层")
st.write("""
卷积神经网络的输出层理解起来就比较简单了，我们只需要将全连接层得到的一维向量经过计算后得到识别值的一个概率，当然，这个计算可能是线性的，也可能是非线性的。在深度学习中，我们需要识别的结果一般都是多分类的，所以每个位置都会有一个概率值，代表识别为当前值的概率，取最大的概率值，就是最终的识别结果。在训练的过程中，可以通过不断地调整参数值来使识别结果更准确，从而达到最高的模型准确率。


""")
st.image('data/cnn-9.png', caption='整个过程', use_column_width=True)